# WARNING: This module is incomplete and work in progress. 
# WARNING: Functions will probably not work as they should and may change at any time.

# Convenient argument parsing.

let List = require("list.pol");

let isFlag(arg) = {
    regexpMatch("^--", arg) != null
};

let parse(optionSpec) = {

    let argv = getArgv();
    let args = tail(argv);

    let printUsage() = {
        print("Usage: (TODO)")
    };

    let getFlag(flag, argCount) = {
        let go(args) = {
            if args == [] then
                null
            else if head(args) == flag then {
                let results = List.take(argCount, args);
                if List.length(results) != argCount || not List.any(isFlag, results) then {
                    print("Not enough arguments to flag '" ~ flag ~ "'.");
                    printUsage();
                    exit(1);
                } else
                    results
            } else {
                go(tail(args));
            }
        };
        go(args);
    };

    let options = #{};

    List.for(optionSpec, \spec -> {
        let flag = List.fst(spec);
        let flagSpec = List.snd(spec);

        if flagSpec.type == "readline" then {
            let flagArgs = getFlag(flag, 1);
            let flagValue = 
                if flagArgs == null 
                then #{
                        get: \() -> readLineDefault(flagSpec.prompt, if flagSpec.default == null then "" else flagSpec.default)
                    }
                else #{
                        get: \() -> head(flagArgs)
                    };
            options := insert(flag, flagValue, options);
        } 
        else if flagSpec.type == "flag-ask" then {
            let flagArgs = getFlag(flag, 0);
            let flagNegative = getFlag("no-" ~ flag, 0);
            let flagValue = 
                if flagNegative != null then #{
                    get: \() -> false
                }
                else if flagArgs != null then #{
                    get: \() -> true
                }
                else #{
                    get: \() -> {
                        let go() = {
                            let answer = readLine(flagSpec.prompt ~ " (y/n) ");
                            if answer == "y" || answer == "Y" then
                                true
                            else if answer == "n" || answer == "N" then
                                false
                            else
                                go()
                        };
                        go();
                    }
                };
            options := insert(flag, flagValue, options);
        }
        else {
            fail("Invalid flag type '" ~ flagSpec.type ~ ")");
        };
    });

    [[], options]
};

#{
    parse: parse
}